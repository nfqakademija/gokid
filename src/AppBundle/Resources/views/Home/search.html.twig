{% extends "::base.html.twig" %}

{% block title %}Homepage - {{ parent() }}{% endblock %}

{% block body %}

        <div class="offers-filter">
            <div class="container">
                <div class="col-sm-12">
                    <form method="post" novalidate="novalidate" class="form-horizontal index-form">
                        <div class="form-group gutter-remove">
                            <div class="top-container">
                                <div class="col-sm-3">
                                    <div class="locate-me">
                                        <span class="glyphicon glyphicon-globe" id="locate-me"></span>
                                    </div>
                                    <input autocomplete="off" id="index_search_offer_address" name="index_search_offer[address]" required="required" placeholder="Gyvenamoji vieta" class="place-input form-control" oninvalid="setCustomValidity('Prašome įvesti gyvenamąją vietą')" type="text">
                                </div>
                                <div class="col-sm-3">
                                    <input id="index_search_offer_age" name="index_search_offer[age]" required="required" placeholder="Vaiko amžius" class="age-input form-control" oninvalid="setCustomValidity('Prašome įvesti vaiko amžių')" type="number">
                                </div>
                                <div class="col-sm-2">
                                    <select class="activities-select">
                                        {% for activity in activities %}
                                            <option value="{{ activity }}">{{ activity }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="gender-input text-center">
                                    <div class="icons-center">
                                        <div class="gender-icon"><b>♂</b></div>
                                        <input id="index_search_offer_male" name="index_search_offer[male]" required="required" class="gender-checkbox" value="1" type="checkbox">
                                        <div class="gender-icon"><b>♀</b></div>
                                        <input id="index_search_offer_female" name="index_search_offer[female]" required="required" class="gender-checkbox" value="1" type="checkbox">
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-2 submit-container">
                                <button type="submit" class="btn btn-default searchbar-submit"><span class="hidden-xs">Ieškoti</span><span class="hidden-sm hidden-md hidden-lg glyphicon glyphicon glyphicon-search" aria-hidden="true"></span></button>
                            </div>
                        </div>
                        <input id="index_search_offer_latitude" name="index_search_offer[latitude]" required="required" class="hidden form-control" type="text"><input id="index_search_offer_longitude" name="index_search_offer[longitude]" required="required" class="hidden form-control" type="text"><input id="index_search_offer_distance" name="index_search_offer[distance]" required="required" class="hidden distance-field form-control" value="10" type="text"><input id="index_search_offer__token" name="index_search_offer[_token]" value="fN35khTrlPQAj5HrF1Dw7Kxrn0KU1pnVqMoYPztXx00" type="hidden"></form>
                </div>
            </div>
        </div>

        {#<div class="container">
            <div class="locate-select col-md-3 col-sm-3 col-xs-12">
                <div class="locate-me">
                    <span class="glyphicon glyphicon-globe" id="locate-me"></span>
                </div>
                <input id="index_search_offer_address" name="index_search_offer[address]" required="required" placeholder="Gyvenamoji vieta" class="location-select" oninvalid="setCustomValidity('Prašome įvesti gyvenamąją vietą')" type="text">
            </div>

            <select class="activities-select col-md-2 col-sm-2 col-xs-6">
                {% for activity in activities %}
                    <option value="{{ activity }}">{{ activity }}</option>
                {% endfor %}
            </select>

            <span class="age col-xs-2 col-md-1 col-sm-1">
                Amžius:
            </span>
            <select class="age-select col-md-1 col-sm-1 col-xs-4">
                {% for item in age_list %}
                    <option value="{{ item }}">{{ item }}</option>
                {% endfor %}
            </select>
        </div>#}

    <div class="container offers">
        <div class="row">

            <div class="col-md-7 col-sm-12">
                <div class="row">

                    {% for offer in offers %}
                        <a href="{{ path('app.offerDetails', {'id': offer.getId}) }}">
                            <div class="col-xs-12 col-sm-6 col-md-6 offer" data-id="{{ offer.getId }}">
                                <div class="offer-inner">
                                    <img src="{{ asset('/images/'~offer.getImage) }}" class="img-responsive" alt="{{ offer.getName }}" />
                                    <div class="offer-content">
                                        <h2>{{ offer.getName }}</h2>
                                        <h5>{{ offer.getDescription|slice(0, 75) }}...</h5>
                                        <span class="offer-rating">5.0</span>
                                        <span class="offer-activity">{{ offer.getActivity.getName }}</span>

                                        <svg class="offer-location" width="14px" height="20px">
                                            <g id="Page-1" stroke="none" stroke-width="1" fill="none">
                                                <path d="M7,0 C3.13383665,0 0,3.0828692 0,6.88540084 C0,10.68827 6.33390528,20 7,20 C7.66609472,20 14,10.68827 14,6.88540084 C14,3.0828692 10.8661633,0 7,0 L7,0 Z M7,9.87341772 C5.2947838,9.87341772 3.91146191,8.51274262 3.91146191,6.83544304 C3.91146191,5.15814346 5.2947838,3.79746835 7,3.79746835 C8.7052162,3.79746835 10.0885381,5.15814346 10.0885381,6.83544304 C10.0885381,8.51274262 8.7052162,9.87341772 7,9.87341772 L7,9.87341772 Z" id="Imported-Layers-Copy-5" fill="currentColor"></path>
                                            </g>
                                        </svg>

                                        <span class="offer-price">{{ offer.getPrice }} € / Mėn</span>
                                    </div>
                                </div>
                            </div>
                        </a>



                        {% if loop.index is divisibleby(2) %}
                            <div class="clearfix hidden-sm hidden-xs"></div>
                        {% endif %}

                        {% if loop.index is divisibleby(2) %}
                            <div class="clearfix hidden-lg hidden-md"></div>
                        {% endif %}

                    {% endfor %}

                    <div class="clearfix"></div>

                </div>
            </div>
            <div class="col-md-5 hidden-sm">
                <div id="map" class="map"></div>
            </div>
        </div>
    </div>

    <script>
        var autocomplete, geocoder, coordinates = null;

        // Address input element
        var input = (document.getElementById('index_search_offer_address'));

        // Locate the users address when globe button is clicked
        $('.locate-me').click(locateUserAddress);

        // Signals whether form is being submitted
        var formSubmiting = false;

        // Initialize address autocomplete plugin
        function initAutocomplete() {
            autocomplete = new google.maps.places.Autocomplete(
                    input,
                    {
                        types: ['(cities)'],
                        componentRestrictions: {country: 'ltu'}
                    }
            );
            geocoder = new google.maps.Geocoder();

            // Change the coordinates variable, when user autocompletes address
            autocomplete.addListener('place_changed', function() {
                var location = autocomplete.getPlace();
                if (location) {
                    changeCoordinates(
                            location.geometry.location.lat(),
                            location.geometry.location.lng()
                    );
                }
            });
        }

        // Confirm that user coordinates are set when form is submitted
        $('.index-form').submit(function(event) {
            // If user has not selected their address from autocomplete list or
            // used geolocating, perform location aproximation
            if (!formSubmiting) {
                if (coordinates == null) {
                    event.preventDefault();
                    var userInput = $('.place-input').val();
                    // User typed nothing, proceed with form submission
                    if (userInput === "") {
                        formSubmiting = true;
                        $('.index-form').submit();
                    } else {
                        var service = new google.maps.places.AutocompleteService();
                        service.getPlacePredictions(
                                {
                                    input: userInput,
                                    types: ['geocode'],
                                    componentRestrictions: {country: 'ltu'}
                                },
                                function (predictions, status) {
                                    // User typed something legible, predict the location
                                    // and set coordinates
                                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                                        if (predictions && predictions[0]) {
                                            var predictedLocation = predictions[0];
                                            geocode({'address': predictedLocation.description},
                                                    function(results) {
                                                        changeCoordinates(
                                                                results[0].geometry.location.lat(),
                                                                results[0].geometry.location.lng()
                                                        );
                                                        formSubmiting = true;
                                                        $('.index-form').submit();
                                                    }
                                            );
                                        } else {
                                            // User input illegible, set coordinates to null
                                            changeCoordinates(null, null);
                                            formSubmiting = true;
                                            $('.index-form').submit();
                                        }
                                    }
                                }
                        );
                    }
                }
            }
        });

        // Geocoding function to reduce code duplication
        function geocode(params, callback) {
            geocoder.geocode(params,
                    function (results, status) {
                        if (status === google.maps.GeocoderStatus.OK) {
                            if (results[0]) {
                                callback(results);
                            } else {
                                console.log('Rasti adreso nepavyko');
                            }
                        } else {
                            console.log('Geocoderio fail del:' + status);
                        }
                    }
            );
        }

        // Set coordinates variable
        function changeCoordinates(lat, lng) {
            coordinates = {
                lat: lat,
                lng: lng
            };
            setCoordinatesInputs();
        }

        // Set values of hidden coordinate fields
        function setCoordinatesInputs() {
            $('#index_search_offer_latitude').val(coordinates.lat);
            $('#index_search_offer_longitude').val(coordinates.lng);
        }

        function locateUserAddress() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var latlng = new google.maps.LatLng(
                            position.coords.latitude,
                            position.coords.longitude
                    );
                    geocode({'latLng': latlng}, function(results) {
                        var addressComponents = results[0].address_components;
                        var address = addressComponents[1].short_name + ' ' +
                                addressComponents[0].long_name + ', ' +
                                addressComponents[2].long_name;
                        $(input).val(address);
                        // Change the coordinates variable, when user uses geolocation
                        changeCoordinates(
                                results[0].geometry.location.lat(),
                                results[0].geometry.location.lng()
                        )
                    })
                });
            }
        }
    </script>

    <script>
        var offers = {{ offers_json|raw }};
        var markers = [];
        var clusters = [];
        var infowindow = [];
        var map;
        var markerClusterer = null;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 11,
                center: {lat: 54.8931048, lng: 23.8666335}
            });
            var green = 'http://maps.google.com/mapfiles/marker_green.png';

            for (var offer in offers) {
                markers[offer] = new google.maps.Marker({
                    position: {lat: offers[offer].latitude, lng: offers[offer].longitude},
                    map: map,
                    title: offers[offer].name,
                    icon: green,
                    id: offer
                });
                clusters.push(markers[offer]);
            }
            setMapParameters(offers);

            markerClusterer = new MarkerClusterer(map, clusters);

            initAutocomplete();
        }
    </script>
    <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclusterer/1.0/src/markerclusterer.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB55WKt6k7UZLVfTeDFi1DV9EQjcsAmwKA&callback=initMap&libraries=places" async defer></script>
{% endblock %}
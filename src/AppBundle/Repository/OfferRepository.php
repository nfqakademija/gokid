<?php

namespace AppBundle\Repository;

use AppBundle\Entity\OfferSearch;
use AppBundle\Entity\User;
use \Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Offer;
use Symfony\Component\HttpFoundation\Request;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends EntityRepository
{
    /**
     * @param OfferSearch $offer
     * @return mixed
     */
    public function search(OfferSearch $offer, $paginator, Request $request)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        if ($offer->getLatitude() && $offer->getLongitude()) {
            $qb->select("o," .
                "(6371 * ACOS(" .
                "COS(RADIANS({$offer->getLatitude()})) * " .
                "COS(RADIANS(o.latitude)) * " .
                "COS(RADIANS(o.longitude) - RADIANS({$offer->getLongitude()})) + " .
                "SIN(RADIANS({$offer->getLatitude()})) * SIN(RADIANS(o.latitude)))" .
                ") as distance")
                ->from('AppBundle:Offer', 'o')
                ->orderBy('distance');
            if ($offer->getDistance()) {
                $qb->having('distance <= :radius')
                    ->setParameter('radius', $offer->getDistance());
            }
        } else {
            $qb->select("o")
                ->from('AppBundle:Offer', 'o');
        }

        if ($offer->getAge()) {
            $qb->where("o.ageFrom <= {$offer->getAge()}")
                ->andWhere("o.ageTo >= {$offer->getAge()}");
        }

        if ($offer->isFemale()) {
            $qb->where("o.female = true");
        }

        if ($offer->isMale()) {
            $qb->where("o.male = true");
        }

        $results = $paginator->paginate(
            $qb,
            $request->query->get('page', 1),
            18,
            array('wrap-queries'=>true)
        );

        if ($offer->getLatitude() && $offer->getLongitude()) {
            $returnArray = [];
            $items = $results->getItems();
            foreach ($items as $item) {
                $item[0]->setDistance($item['distance']);
                $returnArray[] = $item[0];
            }

            $results->setItems($returnArray);

            return $results;
        }

        return $results;
    }

    /**
     * @param Offer $offer
     * @return mixed
     */
    public function searchSimilarOffers(Offer $offer)
    {
        $activity = $offer->getActivity()->getName();
        $ageFrom = $offer->getAgeFrom();
        $ageTo = $offer->getAgeTo();
        $address = $offer->getAddress();

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('o')
            ->from('AppBundle:Offer', 'o');

        if ($activity) {
            $qb->leftJoin('o.activity', 'a');
            $qb->orWhere('a.name = :activity')
                ->setParameter('activity', $activity);
        }

        if ($address) {
            $qb->orWhere('o.address = :address')
                ->setParameter('address', $address);
        }

        if ($ageFrom) {
            $qb->orWhere('o.ageFrom = :ageFrom')
                ->setParameter('ageFrom', $ageFrom);
        }

        if ($ageTo) {
            $qb->orWhere('o.ageTo = :ageTo')
                ->setParameter('ageTo', $ageTo);
        }

        return $qb->getQuery()->setMaxResults(4)->execute();
    }

    /**
     * Generates possible age list
     * @return array
     */
    public function getAgeList()
    {
        $list = [[],[]];

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('o.ageFrom')
            ->from('AppBundle:Offer', 'o')
            ->orderBy('o.ageFrom', 'ASC');
        $first = $qb->getQuery()->setMaxResults(1)->execute();

        if (empty($first)) {
            return $list;
        }

        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $qb2->select('u.ageTo')
            ->from('AppBundle:Offer', 'u')
            ->orderBy('u.ageTo', 'DESC');
        $last = $qb2->getQuery()->setMaxResults(1)->execute();

        $lowest     = $first[0]['ageFrom'];
        $highest    = $last[0]['ageTo'];
        $ageCount   = $highest-$lowest + 1;

        $firstRow   = ceil($ageCount / 2);
        $secRow     = floor($ageCount / 2);

        for ($i=0; $i<$firstRow; $i++) {
            array_push($list[0], $lowest++);
        }

        for ($i=0; $i<$secRow; $i++) {
            array_push($list[1], $lowest++);
        }

        return $list;
    }

    /**
     * @param Offer[]
     * @return string
     */
    public function prepareJSON($offers)
    {
        $data = [];
        foreach ($offers as $offer) {
            /* @var $offer Offer */
            $data[$offer->getId()]['id'] = $offer->getId();
            $data[$offer->getId()]['activity'] = $offer->getActivity()->getName();
            $data[$offer->getId()]['name'] = $offer->getName();
            $data[$offer->getId()]['description'] = $offer->getDescription();
            $data[$offer->getId()]['price'] = $offer->getPrice();
            $data[$offer->getId()]['address'] = $offer->getAddress();
            $data[$offer->getId()]['latitude'] = $offer->getLatitude();
            $data[$offer->getId()]['longitude'] = $offer->getLongitude();
            $data[$offer->getId()]['image'] = $offer->getMainImage()->getImageName();
            $data[$offer->getId()]['paymentType'] = $offer->getPaymentType();
        }

        return json_encode($data);
    }

    /**
     * @param User $user
     * @return Offer[]
     */
    public function getUsersOffers(User $user)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('o')
            ->from('AppBundle:Offer', 'o');

        $qb->where('o.user = :user')->setParameter('user', $user);

        return $qb->getQuery()->execute();
    }

    /**
     * @return integer
     */
    public function getOfferCount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(o)')->from('AppBundle:Offer', 'o');
        return $qb->getQuery()->getSingleScalarResult();
    }
}

<?php

namespace AppBundle\Repository;

use AppBundle\Entity\OfferImage;
use AppBundle\Entity\OfferSearch;
use AppBundle\Entity\User;
use \Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Offer;
use Knp\Component\Pager\Paginator;
use Symfony\Component\HttpFoundation\Request;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends EntityRepository
{

    /**
     * @var int
     */
    private $kmsInDegreeLatitude = 111;

    /**
     * @var int
     */
    private $kmsInDegreeLongitude = 62;

    /**
     * @param OfferSearch $offer
     * @param Paginator $paginator paging bundle
     * @param Request $request search request
     * @return mixed
     */
    public function search(OfferSearch $offer, $paginator, Request $request)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $longitude = $offer->getLongitude();
        $latitude = $offer->getLatitude();

        if ($offer->getLatitude() && $offer->getLongitude()) {
            $distance = $offer->getDistance();
            $boundsLongitude = $distance / $this->kmsInDegreeLongitude;
            $minimumLongitude = $longitude - $boundsLongitude;
            $maximumLongitude = $longitude + $boundsLongitude;
            $boundsLatitude = $distance / $this->kmsInDegreeLatitude;
            $minimumLatitude = $latitude - $boundsLatitude;
            $maximumLatitude = $latitude + $boundsLatitude;
            $qb->select("o")
                ->from('AppBundle:Offer', 'o')
                ->andWhere("o.latitude >= {$minimumLatitude}")
                ->andWhere("o.latitude <= {$maximumLatitude}")
                ->andWhere("o.longitude >= {$minimumLongitude}")
                ->andWhere("o.longitude <= {$maximumLongitude}");
        } else {
            $qb->select("o")
                ->from('AppBundle:Offer', 'o');
        }

        if ($offer->getAge()) {
            $qb->andWhere("o.ageFrom <= {$offer->getAge()}")
                ->andWhere("o.ageTo >= {$offer->getAge()}");
        }

        if ($offer->getPriceFrom()) {
            $qb->andWhere("o.price >= {$offer->getPriceFrom()}");
        }

        if ($offer->getPriceTo()) {
            $qb->andWhere("o.price <= {$offer->getPriceTo()}");
        }

        if ($offer->isFemale()) {
            $qb->andWhere("o.female = true");
        }

        if ($offer->isMale()) {
            $qb->andWhere("o.male = true");
        }

        if ($offer->getActivity()) {
            $qb->andWhere("o.activity = {$offer->getActivity()}");
        }

        $results = $paginator->paginate(
            $qb,
            $request->query->get('page', 1),
            18,
            array('wrap-queries' => true)
        );

        if ($offer->getLatitude() && $offer->getLongitude()) {
            $items = $results->getItems();
            /** @var Offer $item */
            foreach ($items as $item) {
                $item->setDistance($this->calculateDistance(
                    $item->getLatitude(),
                    $item->getLongitude(),
                    $latitude,
                    $longitude
                ));
            }
        }
        return $results;
    }


    /**
     * @param float $offerLatitude
     * @param float $offerLongitude
     * @param float $userLatitude
     * @param float $userLongitude
     * @return float
     */
    private function calculateDistance(
        $offerLatitude,
        $offerLongitude,
        $userLatitude,
        $userLongitude
    ) {
        $distance = (6371 * acos(
            cos(deg2rad($offerLatitude)) *
            cos(deg2rad($userLatitude)) *
            cos(deg2rad($userLongitude) - deg2rad($offerLongitude)) +
            sin(deg2rad($offerLatitude)) * sin(deg2rad($userLatitude))
        ));
        return $distance;
    }

    /**
     * @param Offer $offer
     * @return mixed
     */
    public function searchSimilarOffers(Offer $offer)
    {
        $activity = $offer->getActivity()->getName();
        $ageFrom = $offer->getAgeFrom();
        $ageTo = $offer->getAgeTo();
        $address = $offer->getAddress();

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('o')
            ->from('AppBundle:Offer', 'o');

        if ($activity) {
            $qb->leftJoin('o.activity', 'a');
            $qb->orWhere('a.name = :activity')
                ->setParameter('activity', $activity);
        }

        if ($address) {
            $qb->orWhere('o.address = :address')
                ->setParameter('address', $address);
        }

        if ($ageFrom) {
            $qb->orWhere('o.ageFrom = :ageFrom')
                ->setParameter('ageFrom', $ageFrom);
        }

        if ($ageTo) {
            $qb->orWhere('o.ageTo = :ageTo')
                ->setParameter('ageTo', $ageTo);
        }

        return $qb->getQuery()->setMaxResults(3)->execute();
    }

    /**
     * Generates possible age list
     * @return array
     */
    public function getAgeList()
    {
        $list = [[], []];

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('o.ageFrom')
            ->from('AppBundle:Offer', 'o')
            ->orderBy('o.ageFrom', 'ASC');
        $first = $qb->getQuery()->setMaxResults(1)->execute();

        if (empty($first)) {
            return $list;
        }

        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $qb2->select('u.ageTo')
            ->from('AppBundle:Offer', 'u')
            ->orderBy('u.ageTo', 'DESC');
        $last = $qb2->getQuery()->setMaxResults(1)->execute();

        $lowest     = $first[0]['ageFrom'];
        $highest    = $last[0]['ageTo'];
        $ageCount   = $highest-$lowest + 1;

        $firstRow   = ceil($ageCount / 2);
        $secRow     = floor($ageCount / 2);

        for ($i = 0; $i < $firstRow; $i++) {
            array_push($list[0], $lowest++);
        }

        for ($i = 0; $i < $secRow; $i++) {
            array_push($list[1], $lowest++);
        }

        return $list;
    }

    /**
     * @param object $offers encodes array to json
     * @return string
     */
    public function prepareJSON($offers)
    {
        $data = [];
        foreach ($offers as $offer) {
            /* @var $offer Offer */
            $data[$offer->getId()]['id'] = $offer->getId();
            $data[$offer->getId()]['activity'] = $offer->getActivity()->getName();
            $data[$offer->getId()]['name'] = $offer->getName();
            $data[$offer->getId()]['description'] = $offer->getDescription();
            $data[$offer->getId()]['price'] = $offer->getPrice();
            $data[$offer->getId()]['address'] = $offer->getAddress();
            $data[$offer->getId()]['latitude'] = $offer->getLatitude();
            $data[$offer->getId()]['longitude'] = $offer->getLongitude();
            if ($offer->getMainImage()) {
                $data[$offer->getId()]['image'] = $offer->getMainImage()->getImageName();
            } elseif ($offer->getActivity()->getDefaultImage()) {
                $offer->setMainImage($offer->getActivity()->getDefaultImage());
                $data[$offer->getId()]['image'] = $offer->getActivity()->getDefaultImage();
            } else {
                $mainImage = new OfferImage();
                $mainImage->setImageName('offerDefault.jpg');
                $offer->setMainImage($mainImage);
                $data[$offer->getId()]['image'] = 'offerDefault.jpg';
            }
            $data[$offer->getId()]['paymentType'] = $offer->getPaymentType();
        }

        return json_encode($data);
    }

    /**
     * @param User $user
     * @return Offer[]
     */
    public function getUsersOffers(
        User $user,
        Paginator $paginator,
        Request $request
    ) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('o')
            ->from('AppBundle:Offer', 'o');

        $qb->where('o.user = :user')->setParameter('user', $user);

        $results = $paginator->paginate(
            $qb,
            $request->query->get('page', 1),
            15,
            array('wrap-queries' => true)
        );

        return $results;
    }

    /**
     * @return integer
     */
    public function getOfferCount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('count(o)')->from('AppBundle:Offer', 'o');

        return $qb->getQuery()->getSingleScalarResult();
    }
}
